name: Deploy to Cloud Run

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  SERVICE: frontend-admin
  REGION: us-central1

jobs:
  # Job para testing y linting
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint || true

    - name: Run type checking
      run: npm run build

  # Job para build y deploy (solo en push a main/master)
  deploy:
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as a credential helper
      run: |-
        gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

    - name: Create Artifact Registry repository (if not exists)
      run: |-
        gcloud artifacts repositories create $SERVICE \
          --repository-format=docker \
          --location=$GAR_LOCATION \
          --description="Docker repository for $SERVICE" || true

    - name: Build and Push Container
      run: |-
        docker build -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$SERVICE/$SERVICE:$GITHUB_SHA" .
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$SERVICE/$SERVICE:$GITHUB_SHA"

    - name: Deploy to Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ${{ env.SERVICE }}
        region: ${{ env.REGION }}
        image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}
        env_vars: |
          VITE_API_URL=https://34.60.233.211/api
          VITE_BACKEND_HTTPS=https://34.60.233.211/api
          VITE_BACKEND_HTTP=https://34.60.233.211/api
          VITE_SWAGGER_URL=https://34.60.233.211/swagger
          VITE_DEV_MODE=false
          VITE_ENABLE_DEVTOOLS=false
        flags: |
          --platform=managed
          --allow-unauthenticated
          --port=8080
          --cpu=1
          --memory=512Mi
          --min-instances=0
          --max-instances=10
          --concurrency=80
          --timeout=300
          --ingress=all

    - name: Show Output
      run: echo ${{ steps.deploy.outputs.url }}

    - name: Create GitHub deployment
      uses: actions/github-script@v7
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            auto_merge: false,
            required_contexts: []
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            environment_url: '${{ steps.deploy.outputs.url }}',
            description: 'Deployment successful'
          });
